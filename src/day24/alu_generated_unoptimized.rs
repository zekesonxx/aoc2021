#[allow(dead_code)] #[allow(unused_mut)] #[allow(unused_assignments)]
#[allow(unused_variables)] pub fn alu_generated_program(input : & [isize]) ->
(isize, isize, isize, isize) {
assert_eq!(input.len(), 14, "invalid number of input digits");let mut w = 0isize ; let mut x = 0isize ; let mut y = 0isize ; let mut z =
0isize ;


let mut w=input[0];
x*=0;
x+=z;
x%=26;
z/=1;
x+=13;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=6;
y*=x;
z+=y;

let mut w=input[1];
x*=0;
x+=z;
x%=26;
z/=1;
x+=15;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=7;
y*=x;
z+=y;

let mut w=input[2];
x*=0;
x+=z;
x%=26;
z/=1;
x+=15;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=10;
y*=x;
z+=y;

let mut w=input[3];
x*=0;
x+=z;
x%=26;
z/=1;
x+=11;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=2;
y*=x;
z+=y;

let mut w=input[4];
x*=0;
x+=z;
x%=26;
z/=26;
x+=-7;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=15;
y*=x;
z+=y;

let mut w=input[5];
x*=0;
x+=z;
x%=26;
z/=1;
x+=10;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=8;
y*=x;
z+=y;

let mut w=input[6];
x*=0;
x+=z;
x%=26;
z/=1;
x+=10;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=1;
y*=x;
z+=y;

let mut w=input[7];
x*=0;
x+=z;
x%=26;
z/=26;
x+=-5;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=10;
y*=x;
z+=y;

let mut w=input[8];
x*=0;
x+=z;
x%=26;
z/=1;
x+=15;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=5;
y*=x;
z+=y;

let mut w=input[9];
x*=0;
x+=z;
x%=26;
z/=26;
x+=-3;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=3;
y*=x;
z+=y;

let mut w=input[10];
x*=0;
x+=z;
x%=26;
z/=26;
x+=0;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=5;
y*=x;
z+=y;

let mut w=input[11];
x*=0;
x+=z;
x%=26;
z/=26;
x+=-5;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=11;
y*=x;
z+=y;

let mut w=input[12];
x*=0;
x+=z;
x%=26;
z/=26;
x+=-9;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=12;
y*=x;
z+=y;

let mut w=input[13];
x*=0;
x+=z;
x%=26;
z/=26;
x+=0;
x=if x==w {1}else{0};
x=if x==0 {1}else{0};
y*=0;
y+=25;
y*=x;
y+=1;
z*=y;
y*=0;
y+=w;
y+=10;
y*=x;
z+=y;

(w, x, y, z)
}
